# map
# Функция map пришла из функционального программирования.
# Она позволяет применять некую функцию к каждому элементу итерируемого объекта (строки, списки, кортежи, словари).
# map(function, iter1, iter2, ...)
# iter1, iter2, ... — может быть 1 и более итерируемых объектов, однако на вход функции должно приходить такое же количество аргументов.
# function — ссылка на функцию.

print('Задание 5.5.1 С помощью метода строки str.lower перевести все элементы списка в нижний регистр.')

L = ['THIS', 'IS', 'LOWER', 'STRING']
lst = list(map(str.lower, L))     # lower - без скобок
print('map ', lst)

# filter
# Функция filter согласно своему названию фильтрует элементы итерируемого объекта.
# Она принимает на вход: функцию, которая должна возвращать bool значение (True или False);
# итерируемый объект, над которым будет производиться фильтрация (в этом случае можно передать только один объект).
# Функция filter возвращает итератор с теми элементами из входящей последовательности, для которых функция вернула True.

print('Задание 5.5.2 Отфильтровать из заданного списка только чётные элементы.')

def even(d):
    return d % 2 == 0

M = [-2, -1, 0, 1, -3, 2, -3]
mst = list(filter(even, M))
print('filter:', mst)

# Сортировка словаря. По умолчанию словарь сортируется по ключам
d = {2 : "c", 1 : "d", 4 : "a", 3 : "b"}

# Чтобы отсортировать его по ключам, нужно сделать так
print(dict(sorted(d.items())))
# {1: 'd', 2: 'c', 3: 'b', 4: 'a'}

# А вот, чтобы отсортировать словарь по значениям, необходимо указать, что сортировать нужно по второму элементу
# кортежа ключ-значение. Тут на помощь приходят lambda-функции. У встроенной функции sortred() можно задать аргумент key,
# который укажет, по какому ключу нужно производить сортировку.

sorted(d.items(), key=lambda x: x[1])  # сортировка по значению словаря

print('Задание 5.5.3')
# Предположим у нас есть список с данными о росте и весе людей. Задача — отсортировать их по индексу массы тела.
# Он вычисляется по формуле: свой рост в метрах возвести в квадрат, потом массу тела в килограммах разделить на полученную цифру.
# ИМТ = m/ h**
#  — масса тела в кг;
#  — рост в метрах.
# Например, масса тела = 83 кг, рост = 182 см. Значит,  83 / (1.82 **2) ИМТ = кг м².
# (вес, рост)
data = [(82, 1.91), (68, 1.74), (90, 1.89), (73, 1.79), (76, 1.84)]
w1 = sorted((data), key=lambda x: x[0] /x[1]**2)
print('sorted', w1)

print('Задание 5.5.4', 'Из списка в предыдущем задании найти кортеж с минимальным индексом массы тела.')
w2 = min((data), key=lambda x: x[0] /x[1]**2)
print('min', w2)

print('Задание 5.5.5 Замените знаки «?» корректным выражением. Вывести длину каждого элемента в списке.')

a = ["asd", "bbd", "ddfa", "mcsa"]

def fn(s):
    return len(s)

# можно с функцией, а можно и без фукнции
print(list(map(len, a)))


print('Задание 5.5.6 Замените знаки «?» корректным выражением. '
      'Переведите все строки из списка в верхний регистр (заглавные буквы')

b = ["это", "маленький", "текст", "обидно"]
print(list(map(str.upper, b)))