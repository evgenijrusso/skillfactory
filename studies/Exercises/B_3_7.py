# B3.7. Практические примеры
# Начинающий программист написал программу, которая находит индекс последнего отрицательного элемента в списке.
print('Задание 3.7.1 Задание на самопроверку.', ' \n')
# Ваша задача — подправить код так, чтобы он работал с помощью функции enumerate.
list_ = [-5, 2, 4, 8, 12, -7, 9]
index_negative = None   # Объявим переменную, в которой будем хранить индекс отрицательного элемента

for i, value in enumerate(list_):
    if value < 0:
        print('Отрицательное число', value)
        index_negative = i          # перезаписываем значение индекса
        print('Новый индекс отрицательного числа:', index_negative)
    else:
        print('Положительное число', value)
print('Конец цикла')

# Цикл for со строками и словарями
# Условие задачи: с помощью словаря в заданном тексте посчитать количество вхождений каждого символа.
print('')
text = """
У лукоморья дуб зелёный;
Златая цепь на дубе том:
И днём и ночью кот учёный
Всё ходит по цепи кругом;
Идёт направо -- песнь заводит,
Налево -- сказку говорит.
Там чудеса: там леший бродит,
Русалка на ветвях сидит;
"""
text = text.lower()
text = text.replace(' ', '')
text = text.replace('\n', '')
count = {}  # для подсчёта символов и их количества
for char in text:
    if char in count:   # если уже встречался. По ключу - символ, по значение - кол-во
        count[char] += 1  # количество вхождений
    else:
        count[char] = 1

for char, cnt in count.items():
    print(f'Символ {char} встречался {cnt} раз')

# Допишите функцию check_h так, чтобы она проверяла гипотезу Сиракуз для числа n.
# Гипотеза Сиракуз заключается в том, что любое натуральное число можно свести к 1,
# если повторять над ним следующие действия: если число четное, то разделить его пополам,
# если нечетное - умножить на 3, прибавить 1 и результат разделить на 2.

print(' =================== Задание 3.7.2 (External resource ====================', '\n')

N = 17    # int(input("Введите число\n"))
print('число', N)
while True:
    if N % 2 == 0:
        N = N // 2
    else:
        N = (N * 3 + 1) // 2
    print(N)

    if N == 1:
        print("Done")
        break

# Эта задача прошла с выводом функции (и вместе в функицей). Только надо убирать print


def check_h(n) -> bool:
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = (n * 3 + 1) // 2
        print(n)    # убрать эту строку при проверке

        if n == 1:
            return True
    return False


n = 10
print('число: ', n)
check_h(n)

# ------------  Допишите функцию print_ladder так, чтобы она для числа n печатала лесенку следующего типа:  ----------
# Так и не смог найти решение (см. ниже), тоько функция:
# def print_ladder(n):
#     for i in range(1, n + 1):
#         print(i * '*')

print('--------- Задание 3.7.3 (External resource)', '\n')


def print_ladder(n):
    for i in range(1, n + 1):
        print(i * '*')
    return

n = 1

print_ladder(n)


